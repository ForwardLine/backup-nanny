# Move this file to ~/.backup-nanny/ before making changes
# e.g. changes should be made to ~/.backup-nanny/.env file

# All values below may be changed to your preference.
# Defaults provided as examples and as out-of-box solutions.

# There are 2 uses for this file:
#   - Running BackupNanny locally (sets the environment variables necessary)
#   - Deploying BackupNanny CodePipeline to AWS (CodePipeline will deploy the applicaiton and allow you to safely update when deploying changes)

# All variables below should have values in order to successfully test the application and/or deploy using the deploy tool


APPLICATION_NAME = BackupNanny

# The current environment of the current version of BackupNanny using your preference of environment settings. e.g QA, STG, or PRD
ENVIRONMENT =

# Stack name for the AWS CodePipeline that will be provisioned/managed during deploy tool
PIPELINE_STACK_NAME = ${APPLICATION_NAME}-Pipeline-${ENVIRONMENT}

# Stack name for the Application resources (Lambda functions, Cloudwatch Event Rules, IAM Roles/Policies)
STACK_NAME = ${APPLICATION_NAME}-${ENVIRONMENT}

# The Github account you forked the repository to
GITHUB_ACCOUNT =

# the name of the repository. If you renamed the project, you should change this to match. Otherwise default will work.
REPO = backup-nanny

# Branch to use from the backup-nanny repository when managing/creating the infrastructure and application code
BRANCH = master

# Github Persnal Access Token. This is used in order to create a webhook to your github repository. This webhook will trigger the Pipeline when you have changes to BackupNanny
PAT =

# The production environment. Only Production environments will trigger the API calls that will backup/cleanup.
# If the value you specify in ENVIRONMENT is the same as this value, then this version will be consifered a PRODUCTION version of BackupNanny
PRODUCTION_ENVIRONMENT = PRD

# The AWS tag KEY that BackupNanny will search for when trying to backup or cleanup AMIs.
# This AWS tag KEY will also be added to AMIs that are created during the backup process
BACKUP_AMI_KEY = AMI-Backup

# The AWS tag VALUE that BackupNanny will search for when trying to backup or cleaup AMIs.
# This AWS tag VALUE will also be added to AMIs that are created during the backup process
BACKUP_AMI_VALUE = True

# The AWS cron schedule to use by the Backup AMI Lambda Funtion
# Default is set to run on Saturday at 1:00 AM Pacific Daylight Time
# For reference: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
BACKUP_AMI_SCHEDULE_EXPRESSION = "cron(0 8 ? * SAT *)"

# The AWS cron schedule to use by the Cleanup AMI Lambda Function
# Default is set to run on Saturday at 1:00 AM Pacific Daylight Time
# For reference: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
CLEANUP_AMI_SCHEDULE_EXPRESSION = "cron(0 8 ? * SAT *)"

# Time to live of AMIs and Snapshots generated by the Backup AMI Lambda Function. Default is one fortnight (2 weeks)
TTL_AMI_CLEANUP = 14

# Flag used to determine if Lambda Functions will send emails when errors occur during runtime. Use value of "True" to enable.
IS_SEND_EMAILS_ENABLED = False

# Comma delimited string of email addresses to notify when errors occur. This will get used if the IS_SEND_EMAILS_ENABLED flag is "True".
# In order to send to non-verified emails, you will have to be out of the AWS Simple Email Service sandbox:
#   - https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html
TARGET_EMAILS = email1@test.com,email2@test.com

# An email address you have validated within Amazon Simple Email Service that will be the author of the emails sent in case errors occur
SOURCE_EMAIL =


